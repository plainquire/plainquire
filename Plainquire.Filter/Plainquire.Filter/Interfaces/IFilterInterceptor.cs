using Plainquire.Filter.Abstractions;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;

namespace Plainquire.Filter;

/// <summary>
/// Interceptor to provide custom filter logic for filtered properties.
/// </summary>
/// <autogeneratedoc />
[SuppressMessage("ReSharper", "UnusedAutoPropertyAccessor.Global", Justification = "Provided as library, can be used from outside")]
public interface IFilterInterceptor
{
    /// <summary>
    /// Default filter interceptor used when no other interceptor is provided.
    /// </summary>
    public static IFilterInterceptor? Default { get; set; }

    /// <summary>
    /// Returns the value for 'now' when parsing relative date/time values (e.g. one-week-ago).
    /// </summary>
    Func<DateTimeOffset> Now { get; }

    /// <summary>
    /// Creates a property filter for given values. Called for every filtered property.
    /// </summary>
    /// <typeparam name="TEntity">The type of the filtered entity.</typeparam>
    /// <param name="propertyInfo">The filtered property belongs to <typeparamref name="TEntity"/>.</param>
    /// <param name="filters">The filter values.</param>
    /// <param name="configuration">The filter configuration to use.</param>
    /// <returns>An expression to used to filter the given property or <c>null</c> to use the default filter creator.</returns>
    Expression<Func<TEntity, bool>>? CreatePropertyFilter<TEntity>(PropertyInfo propertyInfo, IEnumerable<ValueFilter> filters, FilterConfiguration configuration);
}